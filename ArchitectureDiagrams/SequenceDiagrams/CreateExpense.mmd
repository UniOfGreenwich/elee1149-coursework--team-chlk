
sequenceDiagram
    title Create Expense
    actor User
    participant ExpenseController
    participant ExpenseService
    participant ExpenseRepository
    participant UserShareRepository
    participant BalanceService
    participant UserRepository
    participant GroupRepository

    User->>ExpenseController: POST /expense/add-expense with CreateExpenseRequest
    ExpenseController->>ExpenseService: addExpense(payerId, createExpenseRequest)
    ExpenseService->>GroupRepository: findById(groupId)
    GroupRepository-->>ExpenseService: Group object / null
    ExpenseService->>UserRepository: findById(payerId)
    UserRepository-->>ExpenseService: User object / null

    alt User and Group Not Found
        ExpenseService-->>ExpenseController: Expense with "GroupAndUserNotFoundError"
    else User Not Found
        ExpenseService-->>ExpenseController: Expense with "UserNotFoundError"
    else Group Not Found
        ExpenseService-->>ExpenseController: Expense with "GroupNotFoundError"
    else Payer Not in Group
        ExpenseService-->>ExpenseController: Expense with "PayerNotInGroupError"
    else Expense Exists
        ExpenseService->>ExpenseRepository: existsByExpenseNameAndGroupId(expenseName, groupId)
        ExpenseRepository-->>ExpenseService: true / false
        alt Expense Exists
            ExpenseService-->>ExpenseController: Expense with "ExpenseExistsInGroupError"
        else Create New Expense
            ExpenseService->>ExpenseRepository: save(newExpense)
            ExpenseRepository-->>ExpenseService: Saved Expense
            loop For each UserShare
                ExpenseService->>UserShareRepository: save(userShare)
                ExpenseService->>BalanceService: updateBalance(payerId, userId, shareAmount)
            end
            ExpenseService-->>ExpenseController: New Expense created
        end
    end
